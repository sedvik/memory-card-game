{"version":3,"sources":["components/Header.js","components/Scoreboard.js","components/Card.js","components/Gameboard.js","components/GameOver.js","images/Ed.png","images/Edd.png","images/Eddy.png","images/Jimmy.png","images/Jonny.png","images/Kevin.png","images/Lee.png","images/Marie.png","images/May.png","images/Nazz.png","images/Plank.png","images/Rolf.png","images/Sarah.png","util/cardData.js","components/MemoryGame.js","App.js","index.js"],"names":["Header","props","className","Scoreboard","currentScore","bestScore","Card","id","src","alt","title","playRound","onClick","e","cardId","target","getAttribute","Gameboard","cards","map","card","GameOver","endingText","maxScore","resetGame","cardTitles","initialCards","Ed","Edd","Eddy","Jimmy","Jonny","Kevin","Lee","Marie","May","Nazz","Plank","Rolf","Sarah","source","i","uniqid","picked","MemoryGame","useState","setCards","gameIsOver","setGameIsOver","setCurrentScore","setBestScore","endGame","useLayoutEffect","length","newCards","j","Math","floor","random","shuffleCards","newBestScore","Object","assign","find","prevCurrentScore","prevCards","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a19c53ec.chunk.js","sourcesContent":["import React from 'react'\nimport '../styles/Header.css'\n\nfunction Header (props) {\n  return (\n    <header className=\"header\">\n      <h1>Ed Edd n Eddy&apos;s Memory Game</h1>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport '../styles/Scoreboard.css'\n\nfunction Scoreboard (props) {\n  const {\n    currentScore,\n    bestScore\n  } = props\n\n  return (\n    <div className=\"scoreboard\">\n      <div className=\"score-container\">\n        <p>{`Score: ${currentScore}`}</p>\n      </div>\n      <div className=\"score-container\">\n        <p>{`Best: ${bestScore}`}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Scoreboard\n","import React from 'react'\nimport '../styles/Card.css'\n\nfunction Card (props) {\n  const {\n    id,\n    src,\n    alt,\n    title,\n    playRound\n  } = props\n\n  function handleClick (e) {\n    const cardId = e.target.getAttribute('data-id')\n    playRound(cardId)\n  }\n\n  return (\n    <div\n      className=\"card\"\n      data-id={id}\n      onClick={handleClick}\n    >\n      <div className=\"img-container\">\n        <img src={src} alt={alt} />\n      </div>\n      <div className=\"title-container\">\n        <p>{title}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\nimport '../styles/Gameboard.css'\n\nfunction Gameboard (props) {\n  const { cards, playRound } = props\n\n  return (\n    <div className=\"game-board\">\n      {\n        cards.map(card => {\n          return (\n            <Card\n              key={card.id}\n              id={card.id}\n              src={card.src}\n              alt={card.alt}\n              title={card.title}\n              playRound={playRound}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default Gameboard\n","import React from 'react'\nimport '../styles/GameOver.css'\n\nfunction GameOver (props) {\n  const {\n    currentScore,\n    bestScore,\n    maxScore,\n    resetGame\n  } = props\n\n  function handleClick () {\n    // Determine if a new best score was obtained\n    let newBestScore\n    currentScore > bestScore\n      ? newBestScore = currentScore\n      : newBestScore = null\n\n    // Reset the game\n    resetGame(newBestScore)\n  }\n\n  let endingText\n\n  if (currentScore < bestScore) {\n    endingText = 'Not quite!'\n  } else if (currentScore === bestScore) {\n    endingText = 'You tied your previous best!'\n  } else if (currentScore === maxScore) {\n    endingText = 'You got the best possible score. Nicely done!'\n  } else if (currentScore > bestScore) {\n    endingText = 'You did better than your previous best!'\n  }\n\n  return (\n    <div className=\"game-over\">\n      <div className=\"ending-text-container\">\n        <p>{endingText}</p>\n      </div>\n      <button onClick={handleClick}>Try Again</button>\n    </div>\n  )\n}\n\nexport default GameOver\n","export default __webpack_public_path__ + \"static/media/Ed.99c24554.png\";","export default __webpack_public_path__ + \"static/media/Edd.69f14523.png\";","export default __webpack_public_path__ + \"static/media/Eddy.8766b35a.png\";","export default __webpack_public_path__ + \"static/media/Jimmy.8c890567.png\";","export default __webpack_public_path__ + \"static/media/Jonny.254637ad.png\";","export default __webpack_public_path__ + \"static/media/Kevin.c1258ca4.png\";","export default __webpack_public_path__ + \"static/media/Lee.60a65637.png\";","export default __webpack_public_path__ + \"static/media/Marie.71b6bb57.png\";","export default __webpack_public_path__ + \"static/media/May.73ebe4d0.png\";","export default __webpack_public_path__ + \"static/media/Nazz.d791fa90.png\";","export default __webpack_public_path__ + \"static/media/Plank.1c3506fe.png\";","export default __webpack_public_path__ + \"static/media/Rolf.e81cd3c4.png\";","export default __webpack_public_path__ + \"static/media/Sarah.8ca54376.png\";","import uniqid from 'uniqid'\nimport Ed from '../images/Ed.png'\nimport Edd from '../images/Edd.png'\nimport Eddy from '../images/Eddy.png'\nimport Jimmy from '../images/Jimmy.png'\nimport Jonny from '../images/Jonny.png'\nimport Kevin from '../images/Kevin.png'\nimport Lee from '../images/Lee.png'\nimport Marie from '../images/Marie.png'\nimport May from '../images/May.png'\nimport Nazz from '../images/Nazz.png'\nimport Plank from '../images/Plank.png'\nimport Rolf from '../images/Rolf.png'\nimport Sarah from '../images/Sarah.png'\n\nconst cardSources = [\n  Ed,\n  Edd,\n  Eddy,\n  Jimmy,\n  Jonny,\n  Kevin,\n  Lee,\n  Marie,\n  May,\n  Nazz,\n  Plank,\n  Rolf,\n  Sarah\n]\n\nconst cardTitles = [\n  'Ed',\n  'Edd',\n  'Eddy',\n  'Jimmy',\n  'Jonny',\n  'Kevin',\n  'Lee',\n  'Marie',\n  'May',\n  'Nazz',\n  'Plank',\n  'Rolf',\n  'Sarah'\n]\n\nconst initialCards = cardSources.map((source, i) => {\n  return {\n    id: uniqid(),\n    src: source,\n    alt: cardTitles[i],\n    title: cardTitles[i],\n    picked: false\n  }\n})\n\nexport default initialCards\n","import React, { useState, useLayoutEffect } from 'react'\nimport Scoreboard from './Scoreboard'\nimport Gameboard from './Gameboard'\nimport GameOver from './GameOver'\nimport initialCards from '../util/cardData'\nimport '../styles/MemoryGame.css'\n\nfunction MemoryGame () {\n  const [cards, setCards] = useState(initialCards)\n  const [gameIsOver, setGameIsOver] = useState(false)\n  const [currentScore, setCurrentScore] = useState(0)\n  const [bestScore, setBestScore] = useState(0)\n\n  // Side Effect for card shuffling when component first mounts and every time the score updates. Also ends the game if the max possible score has been achieved.\n  useLayoutEffect(() => {\n    if (currentScore === cards.length) {\n      endGame()\n    } else {\n      shuffleCards()\n    }\n  }, [currentScore])\n\n  function shuffleCards () {\n    const newCards = [...cards]\n\n    // Shuffle newCards array using Durstenfield shuffle\n    for (let i = newCards.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1))\n      ;[newCards[i], newCards[j]] = [newCards[j], newCards[i]]\n    }\n\n    setCards(newCards)\n  }\n\n  function resetGame (newBestScore) {\n    // Reset 'picked' property to false for all cards\n    const newCards = cards.map(card => {\n      return Object.assign({}, card, { picked: false })\n    })\n    setCards(newCards)\n\n    // Update bestScore if applicable\n    if (newBestScore !== null) {\n      setBestScore(newBestScore)\n    }\n\n    // Reset current Score\n    setCurrentScore(0)\n\n    // Set gameIsOver to false\n    setGameIsOver(false)\n  }\n\n  function endGame () {\n    setGameIsOver(true)\n  }\n\n  function playRound (cardId) {\n    // Check if valid card choice was picked\n    const card = cards.find(card => card.id === cardId)\n\n    // If valid choice was picked, increment current score and update card state\n    if (card.picked === false) {\n      setCurrentScore(prevCurrentScore => prevCurrentScore + 1)\n      setCards(prevCards => {\n        return prevCards.map(card => {\n          return (\n            card.id === cardId\n              ? Object.assign({}, card, { picked: true })\n              : card\n          )\n        })\n      })\n    } else {\n      endGame()\n    }\n  }\n\n  return (\n    <div className=\"memory-game\">\n      <Scoreboard\n        currentScore={currentScore}\n        bestScore={bestScore}\n      />\n      {\n        gameIsOver\n          ? <GameOver\n              currentScore={currentScore}\n              bestScore={bestScore}\n              maxScore={cards.length}\n              resetGame={resetGame}\n            />\n          : <Gameboard\n              cards={cards}\n              playRound={playRound}\n            />\n      }\n    </div>\n  )\n}\n\nexport default MemoryGame\n","import React from 'react'\nimport Header from './components/Header'\nimport MemoryGame from './components/MemoryGame'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MemoryGame />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './styles/reset.css'\nimport './styles/index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}